// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	brandsFieldNames          = builder.RawFieldNames(&Brands{})
	brandsRows                = strings.Join(brandsFieldNames, ",")
	brandsRowsExpectAutoSet   = strings.Join(stringx.Remove(brandsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	brandsRowsWithPlaceHolder = strings.Join(stringx.Remove(brandsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallBrandsIdPrefix   = "cache:goZeroMall:brands:id:"
	cacheGoZeroMallBrandsNamePrefix = "cache:goZeroMall:brands:name:"
)

type (
	brandsModel interface {
		Insert(ctx context.Context, data *Brands) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Brands, error)
		FindOneByName(ctx context.Context, name string) (*Brands, error)
		Update(ctx context.Context, newData *Brands) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBrandsModel struct {
		sqlc.CachedConn
		table string
	}

	Brands struct {
		Id         int64          `db:"id"`
		Name       string         `db:"name"`
		Logo       sql.NullString `db:"logo"`
		AddTime    time.Time      `db:"add_time"`
		IsDeleted  sql.NullInt64  `db:"is_deleted"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newBrandsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBrandsModel {
	return &defaultBrandsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`brands`",
	}
}

func (m *defaultBrandsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return err
}

func (m *defaultBrandsModel) FindOne(ctx context.Context, id int64) (*Brands, error) {
	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, id)
	var resp Brands
	err := m.QueryRowCtx(ctx, &resp, goZeroMallBrandsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", brandsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBrandsModel) FindOneByName(ctx context.Context, name string) (*Brands, error) {
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, name)
	var resp Brands
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallBrandsNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", brandsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBrandsModel) Insert(ctx context.Context, data *Brands) (sql.Result, error) {
	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, data.Id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, brandsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Logo, data.AddTime, data.IsDeleted)
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return ret, err
}

func (m *defaultBrandsModel) Update(ctx context.Context, newData *Brands) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, data.Id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, brandsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Logo, newData.AddTime, newData.IsDeleted, newData.Id)
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return err
}

func (m *defaultBrandsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, primary)
}

func (m *defaultBrandsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", brandsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBrandsModel) tableName() string {
	return m.table
}
