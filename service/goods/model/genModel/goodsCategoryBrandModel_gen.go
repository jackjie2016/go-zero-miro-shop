// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsCategoryBrandFieldNames          = builder.RawFieldNames(&GoodsCategoryBrand{})
	goodsCategoryBrandRows                = strings.Join(goodsCategoryBrandFieldNames, ",")
	goodsCategoryBrandRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsCategoryBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsCategoryBrandRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsCategoryBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallGoodsCategoryBrandIdPrefix                = "cache:goZeroMall:goodsCategoryBrand:id:"
	cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix = "cache:goZeroMall:goodsCategoryBrand:categoryId:brandId:"
)

type (
	goodsCategoryBrandModel interface {
		Insert(ctx context.Context, data *GoodsCategoryBrand) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodsCategoryBrand, error)
		FindOneByCategoryIdBrandId(ctx context.Context, categoryId int64, brandId int64) (*GoodsCategoryBrand, error)
		Update(ctx context.Context, newData *GoodsCategoryBrand) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsCategoryBrandModel struct {
		sqlc.CachedConn
		table string
	}

	GoodsCategoryBrand struct {
		Id         int64         `db:"id"`
		CategoryId int64         `db:"category_id"`
		BrandId    int64         `db:"brand_id"`
		AddTime    time.Time     `db:"add_time"`
		IsDeleted  sql.NullInt64 `db:"is_deleted"`
		UpdateTime time.Time     `db:"update_time"`
	}
)

func newGoodsCategoryBrandModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGoodsCategoryBrandModel {
	return &defaultGoodsCategoryBrandModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`goods_category_brand`",
	}
}

func (m *defaultGoodsCategoryBrandModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return err
}

func (m *defaultGoodsCategoryBrandModel) FindOne(ctx context.Context, id int64) (*GoodsCategoryBrand, error) {
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, id)
	var resp GoodsCategoryBrand
	err := m.QueryRowCtx(ctx, &resp, goZeroMallGoodsCategoryBrandIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsCategoryBrandRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryBrandModel) FindOneByCategoryIdBrandId(ctx context.Context, categoryId int64, brandId int64) (*GoodsCategoryBrand, error) {
	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, categoryId, brandId)
	var resp GoodsCategoryBrand
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `category_id` = ? and `brand_id` = ? limit 1", goodsCategoryBrandRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, categoryId, brandId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryBrandModel) Insert(ctx context.Context, data *GoodsCategoryBrand) (sql.Result, error) {
	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, goodsCategoryBrandRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CategoryId, data.BrandId, data.AddTime, data.IsDeleted)
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return ret, err
}

func (m *defaultGoodsCategoryBrandModel) Update(ctx context.Context, newData *GoodsCategoryBrand) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsCategoryBrandRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CategoryId, newData.BrandId, newData.AddTime, newData.IsDeleted, newData.Id)
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return err
}

func (m *defaultGoodsCategoryBrandModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, primary)
}

func (m *defaultGoodsCategoryBrandModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsCategoryBrandRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsCategoryBrandModel) tableName() string {
	return m.table
}
