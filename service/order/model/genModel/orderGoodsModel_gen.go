// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderGoodsFieldNames          = builder.RawFieldNames(&OrderGoods{})
	orderGoodsRows                = strings.Join(orderGoodsFieldNames, ",")
	orderGoodsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderGoodsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	orderGoodsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderGoodsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallOrderGoodsIdPrefix = "cache:goZeroMall:orderGoods:id:"
)

type (
	orderGoodsModel interface {
		Insert(ctx context.Context, data *OrderGoods) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderGoods, error)
		Update(ctx context.Context, newData *OrderGoods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderGoodsModel struct {
		sqlc.CachedConn
		table string
	}

	OrderGoods struct {
		Id         int64     `db:"id"`
		AddTime    time.Time `db:"add_time"`
		IsDeleted  int64     `db:"is_deleted"`
		UpdateTime time.Time `db:"update_time"`
		Order      int64     `db:"order"`
		Goods      int64     `db:"goods"`
		GoodsName  string    `db:"goods_name"`
		GoodsImage string    `db:"goods_image"`
		GoodsPrice float64   `db:"goods_price"`
		Nums       int64     `db:"nums"`
	}
)

func newOrderGoodsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrderGoodsModel {
	return &defaultOrderGoodsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`order_goods`",
	}
}

func (m *defaultOrderGoodsModel) Delete(ctx context.Context, id int64) error {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallOrderGoodsIdKey)
	return err
}

func (m *defaultOrderGoodsModel) FindOne(ctx context.Context, id int64) (*OrderGoods, error) {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, id)
	var resp OrderGoods
	err := m.QueryRowCtx(ctx, &resp, goZeroMallOrderGoodsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderGoodsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderGoodsModel) Insert(ctx context.Context, data *OrderGoods) (sql.Result, error) {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderGoodsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.Order, data.Goods, data.GoodsName, data.GoodsImage, data.GoodsPrice, data.Nums)
	}, goZeroMallOrderGoodsIdKey)
	return ret, err
}

func (m *defaultOrderGoodsModel) Update(ctx context.Context, data *OrderGoods) error {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderGoodsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.Order, data.Goods, data.GoodsName, data.GoodsImage, data.GoodsPrice, data.Nums, data.Id)
	}, goZeroMallOrderGoodsIdKey)
	return err
}

func (m *defaultOrderGoodsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, primary)
}

func (m *defaultOrderGoodsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderGoodsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderGoodsModel) tableName() string {
	return m.table
}
