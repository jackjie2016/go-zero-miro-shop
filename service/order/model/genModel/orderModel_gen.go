// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallOrderIdPrefix      = "cache:goZeroMall:order:id:"
	cacheGoZeroMallOrderOrderSnPrefix = "cache:goZeroMall:order:orderSn:"
	cacheGoZeroMallOrderTradeNoPrefix = "cache:goZeroMall:order:tradeNo:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Order, error)
		FindOneByOrderSn(ctx context.Context, orderSn sql.NullString) (*Order, error)
		FindOneByTradeNo(ctx context.Context, tradeNo sql.NullString) (*Order, error)
		Update(ctx context.Context, newData *Order) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Id           int64          `db:"id"`
		AddTime      time.Time      `db:"add_time"`
		IsDeleted    int64          `db:"is_deleted"`
		UpdateTime   time.Time      `db:"update_time"`
		User         int64          `db:"user"`
		OrderSn      sql.NullString `db:"order_sn"`
		PayType      string         `db:"pay_type"`
		Status       string         `db:"status"`
		TradeNo      sql.NullString `db:"trade_no"`
		OrderMount   float64        `db:"order_mount"`
		PayTime      sql.NullTime   `db:"pay_time"`
		Address      string         `db:"address"`
		SignerName   string         `db:"signer_name"`
		SingerMobile string         `db:"singer_mobile"`
		Post         string         `db:"post"`
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, id)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, goZeroMallOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByOrderSn(ctx context.Context, orderSn sql.NullString) (*Order, error) {
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, orderSn)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallOrderOrderSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", orderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderSn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByTradeNo(ctx context.Context, tradeNo sql.NullString) (*Order, error) {
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, tradeNo)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallOrderTradeNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `trade_no` = ? limit 1", orderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tradeNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, data.Id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.User, data.OrderSn, data.PayType, data.Status, data.TradeNo, data.OrderMount, data.PayTime, data.Address, data.SignerName, data.SingerMobile, data.Post)
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, newData *Order) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, data.Id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.AddTime, newData.IsDeleted, newData.User, newData.OrderSn, newData.PayType, newData.Status, newData.TradeNo, newData.OrderMount, newData.PayTime, newData.Address, newData.SignerName, newData.SingerMobile, newData.Post, newData.Id)
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
